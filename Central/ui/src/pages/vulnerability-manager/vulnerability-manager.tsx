import styles from './vulnerability-manager.module.css';
import Header from '@/components/header';
import Table from '../../components/ui/table';
import Title from '../../components/ui/typography/title';
import { useEffect, useState } from 'react';
import { DropdownMenu } from '../../components/ui/drop-down-menu/drop-down-menu';
import { CloseIcon, KebabHorizontalIcon, SearchIcon } from '../../components/ui/icons';
import Input from '../../components/ui/input-field';
import Label from '@/components/ui/typography/label';
import Paragraph from '@/components/ui/typography/paragragh';
import { useVulnerabilitiesQuery } from '@/api/lib/vulnerabilities';
import { format } from 'date-fns';
import { Modal } from '@/components/ui/modal/modal';
import CheckBox from '@/components/ui/checkbox';
import { HamburgerVerticalIcon } from '@/components/ui/icons/hamburger-vertical-icon';
import Button from '@/components/ui/button';

export const VulnerabilityManager = () => {
    const [globalFilter, setGlobalFilter] = useState('');
    const formatedData = [] as any;
    const [size, setSize] = useState(10);
    const [from, setFrom] = useState(0);
    const [activeVul, setActiveVul] = useState(null) as any;
    const  { data } = useVulnerabilitiesQuery.getVulnerabilities(size, from);
    const {data:statsData} = useVulnerabilitiesQuery.getStats();
    const unformatedData = data?.data.data;
    console.log('ddddd',unformatedData);
    unformatedData?.forEach((item:any) => {
      const el = {
        title: item?._source.descriptions[0]?.value,
        timestamp: format(new Date(item?._source.published), 'PPp'),
        last_detected: format(new Date(item?._source.lastModified), 'P'),
        first_detected: format(new Date(item?._source.published), 'P'),
        confidence:'-',
        risk_level:'-',
        cvss:'-',
        status: item?._source.vulnStatus,
        cve:item?._source.id,
      }
      formatedData.push(el);
    });

const columns = [
      {
        id: 'select',
        size: 35,
        header: ({ table }:any) => (
          <CheckBox className={styles['checkboxCol']}
            label=''
            {...{
              checked: table.getIsAllRowsSelected(),
              indeterminate: table.getIsSomeRowsSelected(),
              onChange: table.getToggleAllRowsSelectedHandler(),
            }}
          />
        ),
        cell: ({ row }:any) => (
          <div className={styles['checkboxCol']}>
            <CheckBox
              label=''
              {...{
                checked: row.getIsSelected(),
                disabled: !row.getCanSelect(),
                indeterminate: row.getIsSomeSelected(),
                onChange: row.getToggleSelectedHandler(),
              }}
            />
          </div>
        ),
      },
       {
        id: 'title',
        header: 'Title',
        accessorKey: 'title',
        cell: (ctx: { getValue: () => any; }) => ctx.getValue(),
        size:400,
      },
      {
        id: 'timestamp',
        header: 'Timestamp',
        accessorKey: 'timestamp',
        cell: (ctx: { getValue: () => any; }) => ctx.getValue(),
      },
      {
        id: 'cve',
        header: 'CVE',
        accessorKey: 'cve',
        cell: (ctx: { getValue: () => any; }) => ctx.getValue(),
      },
      {
        id: 'cvss',
        header: 'CVSS',
        accessorKey: 'cvss',
        cell: (ctx: { getValue: () => any; }) => ctx.getValue(),
      },
      {
        id: 'risk_level',
        header: 'Risk Level',
        accessorKey: 'risk_level',
        cell: (ctx: { getValue: () => any; }) => ctx.getValue(),
      },
      {
        id: 'confidence',
        header: 'Confidence',
        accessorKey: 'confidence',
        cell: (ctx: { getValue: () => any; }) => ctx.getValue(),
      },
      {
        id: 'status',
        header: 'Status',
        accessorKey: 'status',
        cell: (ctx: { getValue: () => any; }) => ctx.getValue(),
      },
      {
        id: 'first_detected',
        header: 'First Detected',
        accessorKey: 'first_detected',
        cell: (ctx: { getValue: () => any; }) => ctx.getValue(),
      },
      {
        id: 'last_detected',
        header: 'Last Detected',
        accessorKey: 'last_detected',
        cell: (ctx: { getValue: () => any; }) => ctx.getValue(),
      },
      {
        id: 'action',
        header: 'Action',
        cell: (ctx:any) => {
          return <div className={styles['kebab-menu']}><DropdownMenu customIcon={<HamburgerVerticalIcon fill={'var(--color-gray)'} width="4" height="14" />} menu={[{
            title:'View Details',
            onClick:() => {
              setActiveVul(ctx.row.original)
            },
          },
         ]} /></div>
        },
      },
    ];     
 return(
        <>
        <div className={styles['container']}>
        <Header title="Vulnerabilities Manager" />

        {/* <div className={styles['subContainer']}> 
                <div className={styles['subBoxStyle']}>
          <Label className={styles['pTextStyle']} children='10 Vulnerability Detections' />
          <Label className={styles['labelStyle']} children="based on Scan done at" />
          <Label className={styles['labelColor']} children="15 May 2020 8:30 am" />

         <div className={styles['kebab-horizental-menu']}>
          <DropdownMenu customIcon={<KebabHorizontalIcon fill={'var(--color-gray)'} width="32" height="24" />} 
            menu={[{
          title:'Edit',
          onClick:() => console.log('handle edit'),
        },
        {
          title:'Delete',
          onClick:() => console.log('handle delete'),
        },
       ]} /></div></div> */}
      
<div>
      <div className={styles['content']}>
            <div className={styles['boxStyle']}>
            <Label className={styles['smallLabel']} children="Unique CVEs" />
            <Title variant='T3' className={styles['digiStyle']} children={statsData?.data.total_cve} />
            </div>
            <div className={styles['boxStyle']}>
            <Label className={styles['smallLabel']} children="Prioritized As Now" />
            <Title variant='T3' className={styles['digiStyle']} children={statsData?.data.prioritized}/>
            </div>
            <div className={styles['boxStyle']}>
            <Label className={styles['smallLabel']} children="Critical CVS" />
            <Title variant='T3' className={styles['digiStyle']} children={statsData?.data.critical}/>
            </div>
            <div className={styles['boxStyle']}>
            <Label className={styles['smallLabel']} children="Low/Medium Confidence" />
            <Title variant='T3' className={styles['digiStyle']} children={statsData?.data.confidence}/>
            </div>
      </div>
      </div>
      {/* </div> */}
        <div className={styles['tableWrapper']}>
        <Title variant="T3" children={'Showing all Open vulnerabilities'} />
        <Table className={styles['tableStyle']} columns={columns} data={formatedData} showPagination pageSize={1}  />
        </div>
    </div>
    <Modal isOpen={!!activeVul} className={styles['modalBox']}>
    <div className={styles['header']}>
      <Button variant="TERTIARY" children={<CloseIcon width='18' height='18' color='#000' />} 
        onClick={() => setActiveVul(null)}
      />
    </div>
  <div className={styles['content']}>
   <Paragraph variant="P1" children={activeVul?.cve} className={''} />
   <Paragraph variant="P6" children={activeVul?.title} className={''} />
   <Paragraph variant="P3" children={activeVul?.status} className={''} />
  </div>
    </Modal>
        </>
 )
};